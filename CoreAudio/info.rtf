{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 //variable bit rate;\
//canonical format ,default format.\
\
\pard\pardeftab720\partightenfactor0

\f1 \cf2 \expnd0\expndtw0\kerning0
[_window makeKeyAndVisible]; or, preferably, use the accessor method: [self.window makeKeyAndVisible];
\f0 \cf0 \kerning1\expnd0\expndtw0 \

\f1 \cf2 \expnd0\expndtw0\kerning0
Each platform actually has two canonical formats, the AudioSampleType, which is used for I/O situations, and the AudioUnitSampleType, introduced in Snow Leopard and iOS, which is used in audio units and for digital signal processing. \
\
\
//Core Audio:\
	headers:\
		CoreAudioTypes.h\
	Functions:\
\
\
Audio Queue services highest playback and recoding api in core audio.\
	unlinke OpenAl and Audio units Audio Queues can accept enoded data like AAC and MP3\
	An audio queue is a simple software interface to a piece of audio hardware\
\
	hardware->AudioQueue(Buffer)->Buffer(recorder)->callbackfunc(buffer)->work on buffer based on needs.\
\
//		3 . Audio Processing with Core Audio.\
	\
	Audio format identification ;ASBD,ASPD,Magic cookies.\
	Core Audio views audio data as streams of packets.The contents of a stream\'92s packets are described by its AudioStreamBasicDescription.\
	struct AudioStreamBasicDescription \
	\{ \
	  Float64 mSampleRate; \
	  UInt32 mFormatID; \
	  UInt32 mFormatFlags;\
	 UInt32 mBytesPerPacket; \
	 UInt32 mFramesPerPacket;\
	 UInt32 mBytesPerFrame; \
	 UInt32 mChannelsPerFrame;\
	UInt32 mBitsPerChannel; \
	UInt32 mReserved;\},\
	\
	typedef struct AudioStreamBasicDescription AudioStreamBasicDescription;//describes every packet for inidividual packet AudioStreamPacketDescription as below.\
	\
	struct AudioStreamPacketDescription \{ SInt64 mStartOffset; UInt32 mVariableFramesInPacket; UInt32 mDataByteSize; \}; typedef struct AudioStreamPacketDescription AudioStreamPacketDescription;\
	\
	In practice, this means that when you open a file or network stream of compressed data, you check for a magic cookie property. If present, you read it in as a block of untyped data and pass it along to Core Audio without worrying 		about what might be inside it.\
	\
\
//			4.	Recording:\
\
	\outl0\strokewidth0 \strokec2 Audio Queue Services, the highest-level playback and recording API in Core Audio:\
	Unlike with OpenAL and Audio Units, you can use encoded formats such as AAC and MP3 with audio queues. n By default,Audio Queues call you back on their own thread, which isolates you from some timing challenges with  		Audio Units\
\
	setup audio format->create audio q->start the q ->stop the q->clean up such as closing the file.\
\
	use AudioHardwareServices to inspect the audio hardware devices;\
\outl0\strokewidth0 \
\
\
HEADERS:\
	#import <AudioToolbox/AudioToolbox.h> to .m and AudioToolbox.framework to the project.\
	CoreAudioTypes.h,AudioFile.h\
	\
\
FUNCTIONS:\
	AudioFileGetGlobalInfo\
\
}